require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BillFriendsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # BillFriend. As you add validations to BillFriend, be sure to
  # adjust the attributes here as well.
  let(:bill) { Bill.create!(date: DateTime.now, bill_type: "Dinner", amount: 25.0) }

  let(:valid_attributes) {
    {user_id: 1, bill_id: 1, contribution: 15.0}
  }

  let(:invalid_attributes) {
    {user_id: 1, bill_id: 1, contribution: nil}
  }

  describe "GET #index" do
    it "assigns all bill_friends as @bill_friends" do
      bill_friend = BillFriend.create! valid_attributes
      get :index, {bill_id: 1, bill_friend_id: bill_friend.id}
      expect(assigns(:bill_friends)).to eq([bill_friend])
    end
  end

  describe "GET #show" do
    it "assigns the requested bill_friend as @bill_friend" do
      bill_friend = BillFriend.create! valid_attributes
      get :show, {bill_id: 1, id: bill_friend.id}
      expect(assigns(:bill_friend)).to eq(bill_friend)
    end
  end

  describe "GET #new" do
    it "assigns a new bill_friend as @bill_friend" do
      bill = Bill.create!(date: DateTime.now, bill_type: "Dinner", amount: 25.0)
      get :new, {bill_id: bill.id}
      expect(assigns(:bill_friend)).to be_a_new(BillFriend)
    end
  end

  describe "GET #edit" do
    it "assigns the requested bill_friend as @bill_friend" do
      bill_friend = BillFriend.create! valid_attributes
      get :edit, {bill_id: 1, :id => bill_friend.to_param}
      expect(assigns(:bill_friend)).to eq(bill_friend)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new BillFriend" do
        bill = Bill.create!(date: DateTime.now, bill_type: "Dinner", amount: 25.0)
        expect {
          post :create, {:bill_id => bill.id, :bill_friend => valid_attributes}
        }.to change(BillFriend, :count).by(1)
      end

      it "assigns a newly created bill_friend as @bill_friend" do
        bill = Bill.create!(date: DateTime.now, bill_type: "Dinner", amount: 25.0)
        post :create, {bill_id: bill.id, :bill_friend => valid_attributes}
        expect(assigns(:bill_friend)).to be_a(BillFriend)
        expect(assigns(:bill_friend)).to be_persisted
      end

      it "redirects to the created bill_friend" do
        bill = Bill.create!(date: DateTime.now, bill_type: "Dinner", amount: 25.0)
        post :create, {bill_id: bill.id, :bill_friend => valid_attributes}
        expect(response).to redirect_to(bill_url(bill))
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {contribution: 25.0}
      }

      it "updates the requested bill_friend" do
        bill_friend = BillFriend.create! valid_attributes
        put :update, {bill_id: bill.id, :id => bill_friend.to_param, :bill_friend => new_attributes}
        bill_friend.reload
        expect(bill_friend.contribution).to eq 25.0
      end

      it "assigns the requested bill_friend as @bill_friend" do
        bill_friend = BillFriend.create! valid_attributes
        put :update, {bill_id: bill.id, :id => bill_friend.to_param, :bill_friend => valid_attributes}
        expect(assigns(:bill_friend)).to eq(bill_friend)
      end

      it "redirects to the bill_friend" do
        bill_friend = BillFriend.create! valid_attributes
        put :update, {bill_id: bill.id, :id => bill_friend.to_param, :bill_friend => valid_attributes}
        expect(response).to redirect_to(bill_url(bill))
      end
    end

    context "with invalid params" do

      it "assigns the bill_friend as @bill_friend" do
        bill_friend = BillFriend.create! valid_attributes
        put :update, {bill_id: bill.id, :id => bill_friend.to_param, :bill_friend => invalid_attributes}
        expect(assigns(:bill_friend)).to eq(bill_friend)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested bill_friend" do
      bill_friend = BillFriend.create! valid_attributes
      expect {
        delete :destroy, {bill_id: bill.id, :id => bill_friend.to_param}
      }.to change(BillFriend, :count).by(-1)
    end

    it "redirects to the bill_friends list" do
      bill_friend = BillFriend.create! valid_attributes
      delete :destroy, {bill_id: bill.id, :id => bill_friend.to_param}
      expect(response).to redirect_to(bill_url(bill))
    end
  end

end
